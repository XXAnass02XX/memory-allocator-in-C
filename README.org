# C-MemAllocator

C-MemAllocator is a custom memory allocator implemented in C, designed to efficiently manage memory allocation and deallocation for different sizes of memory blocks.

## Project Structure

The project consists of several C files, each responsible for different aspects of memory management:

1. `mem.c`: Main allocation and deallocation functions
2. `mem_internals.c`: Core functionality for memory management internals
3. `mem_large.c`: Handles allocation and deallocation of large memory blocks
4. `mem_medium.c`: Manages medium-sized memory allocations using a buddy system
5. `mem_small.c`: Deals with small memory allocations using a chunk-based approach
6. `memshell.c`: Provides a command-line interface for testing the memory allocator

## Key Features

- Support for small, medium, and large memory allocations
- Efficient memory reuse and management
- Buddy system for medium-sized allocations
- Chunk-based allocation for small memory blocks
- Command-line interface for testing and demonstration

## How It Works

The allocator divides memory requests into three categories:

### Small Allocations (<=SMALLALLOC)
- Managed in fixed-size chunks
- Uses a linked list of free chunks for quick allocation and deallocation

### Medium Allocations (>SMALLALLOC and <LARGEALLOC)
- Implements a buddy system for efficient memory use
- Supports splitting and merging of memory blocks

### Large Allocations (>=LARGEALLOC)
- Directly uses `mmap` for large memory requests
- Provides simple allocation and deallocation of large blocks

## Main Functions

The core functionality is provided by two main functions in `mem.c`:

1. `emalloc(unsigned long size)`: Allocates memory of the specified size
   - Returns NULL if size is 0
   - Calls appropriate allocation function based on size

2. `efree(void *ptr)`: Frees the allocated memory
   - Determines the type of allocation and calls the appropriate deallocation function

## Usage

To use the memory allocator in your C programs:

1. Include the necessary header files (e.g., `mem.h`)
2. Use `emalloc` for memory allocation and `efree` for deallocation

Example:
```c
#include "mem.h"

int main() {
    void *ptr = emalloc(1024);  // Allocate 1024 bytes
    // Use the allocated memory
    efree(ptr);  // Free the allocated memory
    return 0;
}
```

To test the allocator using the provided shell:

1. Compile the project (makefile not provided in the given files)
2. Run the resulting executable
3. Use the command-line interface to allocate, free, and manage memory

## Command-Line Interface

The `memshell.c` file provides a simple interface with the following commands:

- `init`: Initialize or reinitialize the allocator
- `alloc <size>`: Allocate a memory block of the specified size
- `free <id>`: Free a previously allocated memory block
- `destroy`: Free the entire allocator
- `show`: Display initial size and start address
- `used`: Show a list of currently allocated blocks
- `help`: Display help information
- `exit`: Quit the shell

## Notes

- This project is distributed under the GPLv3+ license.
- The allocator supports up to 5000 allocations between initializations.
- Memory is marked with magic numbers for integrity checking.

## Future Improvements

- Implement thread-safety for concurrent applications
- Optimize the buddy system for better performance
- Add more detailed error handling and reporting
- Implement memory coalescing for better memory utilization

## License

This project is licensed under the GPLv3+. See the LICENSE file for details.
